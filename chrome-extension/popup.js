document.addEventListener('DOMContentLoaded', function () {
  'use strict';

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
  const DEFAULT_EXCLUDED_CHATS = [
    '–ü—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã –≤ —Ç—Ä–∏–Ω–∫—É',
    '–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–∏ –º–∞—à–∏–Ω—ã',
  ];

  // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
  const tabButtons = document.querySelectorAll('.tab-button');
  const tabContents = document.querySelectorAll('.tab-content');
  const newChatInput = document.getElementById('new-chat-input');
  const addChatButton = document.getElementById('add-chat-btn');
  const excludedList = document.getElementById('excluded-list');
  const resetButton = document.getElementById('reset-excluded-btn');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  initializeTabs();
  loadExcludedChats();

  /** –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–æ–≤ */
  function initializeTabs() {
    tabButtons.forEach((button) => {
      button.addEventListener('click', () => {
        const targetTab = button.getAttribute('data-tab');
        switchToTab(targetTab);
      });
    });
  }

  /** –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ç–∞–±–∞–º–∏ */
  function switchToTab(targetTabName) {
    // –£–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å —Å–æ –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    tabButtons.forEach((btn) => btn.classList.remove('active'));
    tabContents.forEach((content) => content.classList.remove('active'));

    // –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –∫–ª–∞—Å—Å –∫ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º
    const activeButton = document.querySelector(
      `[data-tab="${targetTabName}"]`
    );
    const activeContent = document.getElementById(`${targetTabName}-tab`);

    if (activeButton && activeContent) {
      activeButton.classList.add('active');
      activeContent.classList.add('active');
    }

    // –ï—Å–ª–∏ –ø–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ —Ç–∞–± –∏—Å–∫–ª—é—á–µ–Ω–∏–π, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
    if (targetTabName === 'excluded') {
      loadExcludedChats();
    }
  }

  /** –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ storage */
  async function loadExcludedChats() {
    try {
      const result = await chrome.storage.sync.get(['excludedChats']);
      const excludedChats = result.excludedChats || DEFAULT_EXCLUDED_CHATS;
      renderExcludedList(excludedChats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:', error);
      renderExcludedList(DEFAULT_EXCLUDED_CHATS);
    }
  }

  /** –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –≤ storage */
  async function saveExcludedChats(excludedChats) {
    try {
      await chrome.storage.sync.set({ excludedChats });
      console.log('–ò—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', excludedChats);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º content script –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      notifyContentScriptAboutChanges(excludedChats);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:', error);
    }
  }

  /** –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ content script –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö */
  async function notifyContentScriptAboutChanges(excludedChats) {
    try {
      const [tab] = await chrome.tabs.query({
        active: true,
        currentWindow: true,
      });
      if (
        tab &&
        (tab.url.includes('chatgpt.com') || tab.url.includes('chat.openai.com'))
      ) {
        chrome.tabs.sendMessage(tab.id, {
          type: 'EXCLUDED_CHATS_UPDATED',
          excludedChats: excludedChats,
        });
      }
    } catch (error) {
      console.log('Content script –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω');
    }
  }

  /** –û—Ç—Ä–∏—Å–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ */
  function renderExcludedList(excludedChats) {
    excludedList.innerHTML = '';

    if (!excludedChats || excludedChats.length === 0) {
      excludedList.innerHTML =
        '<div class="empty-state">–ù–µ–º–∞—î –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤</div>';
      return;
    }

    excludedChats.forEach((chatTitle, index) => {
      const itemElement = createExcludedItem(chatTitle, index);
      excludedList.appendChild(itemElement);
    });
  }

  /** –°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */
  function createExcludedItem(chatTitle, index) {
    const itemDiv = document.createElement('div');
    itemDiv.className = 'excluded-item';
    itemDiv.innerHTML = `
      <div class="excluded-item-text">${escapeHtml(chatTitle)}</div>
      <div class="excluded-item-actions">
        <button class="edit-btn" data-index="${index}">‚úèÔ∏è</button>
        <button class="delete-btn" data-index="${index}">üóëÔ∏è</button>
      </div>
    `;

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const editButton = itemDiv.querySelector('.edit-btn');
    const deleteButton = itemDiv.querySelector('.delete-btn');

    editButton.addEventListener('click', () => editExcludedChat(index));
    deleteButton.addEventListener('click', () => deleteExcludedChat(index));

    return itemDiv;
  }

  /** –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ HTML */
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  /** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */
  async function addExcludedChat() {
    const newChatTitle = newChatInput.value.trim();

    if (!newChatTitle) {
      alert('–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —á–∞—Ç—É');
      return;
    }

    try {
      const result = await chrome.storage.sync.get(['excludedChats']);
      const currentExcluded = result.excludedChats || DEFAULT_EXCLUDED_CHATS;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞
      if (
        currentExcluded.some(
          (chat) => chat.toLowerCase() === newChatTitle.toLowerCase()
        )
      ) {
        alert('–¢–∞–∫–∏–π —á–∞—Ç –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö');
        return;
      }

      const updatedExcluded = [...currentExcluded, newChatTitle];
      await saveExcludedChats(updatedExcluded);

      newChatInput.value = '';
      renderExcludedList(updatedExcluded);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —á–∞—Ç—É');
    }
  }

  /** –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */
  async function editExcludedChat(index) {
    try {
      const result = await chrome.storage.sync.get(['excludedChats']);
      const currentExcluded = result.excludedChats || DEFAULT_EXCLUDED_CHATS;

      const currentTitle = currentExcluded[index];
      const newTitle = prompt('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –Ω–∞–∑–≤—É —á–∞—Ç—É:', currentTitle);

      if (newTitle === null) return; // –û—Ç–º–µ–Ω–∞

      const trimmedTitle = newTitle.trim();
      if (!trimmedTitle) {
        alert('–ù–∞–∑–≤–∞ —á–∞—Ç—É –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –ø–æ—Ä–æ–∂–Ω—å–æ—é');
        return;
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã (–∏—Å–∫–ª—é—á–∞—è —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç)
      const otherChats = currentExcluded.filter((_, i) => i !== index);
      if (
        otherChats.some(
          (chat) => chat.toLowerCase() === trimmedTitle.toLowerCase()
        )
      ) {
        alert('–¢–∞–∫–∏–π —á–∞—Ç –≤–∂–µ —î –≤ —Å–ø–∏—Å–∫—É –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö');
        return;
      }

      const updatedExcluded = [...currentExcluded];
      updatedExcluded[index] = trimmedTitle;

      await saveExcludedChats(updatedExcluded);
      renderExcludedList(updatedExcluded);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∞—Ç–∞:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—ñ —á–∞—Ç—É');
    }
  }

  /** –£–¥–∞–ª–µ–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ */
  async function deleteExcludedChat(index) {
    try {
      const result = await chrome.storage.sync.get(['excludedChats']);
      const currentExcluded = result.excludedChats || DEFAULT_EXCLUDED_CHATS;

      const chatTitle = currentExcluded[index];
      if (!confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ "${chatTitle}" –∑—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤?`)) {
        return;
      }

      const updatedExcluded = currentExcluded.filter((_, i) => i !== index);
      await saveExcludedChats(updatedExcluded);
      renderExcludedList(updatedExcluded);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —á–∞—Ç–∞:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —á–∞—Ç—É');
    }
  }

  /** –°–±—Ä–æ—Å –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–º —á–∞—Ç–∞–º */
  async function resetToDefaultExcluded() {
    if (
      !confirm(
        '–°–∫–∏–Ω—É—Ç–∏ —Å–ø–∏—Å–æ–∫ –∑–±–µ—Ä–µ–∂–µ–Ω–∏—Ö —á–∞—Ç—ñ–≤ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ? –í—Å—ñ –≤–∞—à—ñ –∑–º—ñ–Ω–∏ –±—É–¥—É—Ç—å –≤—Ç—Ä–∞—á–µ–Ω—ñ.'
      )
    ) {
      return;
    }

    try {
      await saveExcludedChats(DEFAULT_EXCLUDED_CHATS);
      renderExcludedList(DEFAULT_EXCLUDED_CHATS);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —á–∞—Ç–∞–º:', error);
      alert('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∫–∏–¥–∞–Ω–Ω—ñ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏—Ö —á–∞—Ç—ñ–≤');
    }
  }

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
  addChatButton.addEventListener('click', addExcludedChat);
  resetButton.addEventListener('click', resetToDefaultExcluded);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –ø–æ Enter
  newChatInput.addEventListener('keypress', (event) => {
    if (event.key === 'Enter') {
      addExcludedChat();
    }
  });
});
