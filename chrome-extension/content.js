(function () {
  'use strict';

  // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∏—Å–∫–ª—é—á–∞–µ–º—ã–µ —á–∞—Ç—ã
  const DEFAULT_EXCLUDED_CHATS = [];

  // –¢–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∏—Å–∫–ª—é—á–∞–µ–º—ã—Ö —á–∞—Ç–æ–≤ (–±—É–¥–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ storage)
  let currentExcludedChats = DEFAULT_EXCLUDED_CHATS.map((chat) =>
    chat.toLowerCase()
  );

  // –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
  let isUIAdded = false;
  let capturedAccessToken = null;

  /** –£—Ç–∏–ª–∏—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è */
  function waitForTime(milliseconds) {
    return new Promise((resolve) => setTimeout(resolve, milliseconds));
  }

  /** –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ –∏–∑ chrome.storage */
  async function loadExcludedChatsFromStorage() {
    try {
      const result = await chrome.storage.sync.get(['excludedChats']);
      const excludedChats = result.excludedChats || DEFAULT_EXCLUDED_CHATS;
      currentExcludedChats = excludedChats.map((chat) => chat.toLowerCase());
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:', currentExcludedChats);
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤:', error);
      currentExcludedChats = DEFAULT_EXCLUDED_CHATS.map((chat) =>
        chat.toLowerCase()
      );
    }
  }

  /** –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç popup */
  chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
    if (message.type === 'EXCLUDED_CHATS_UPDATED') {
      currentExcludedChats = message.excludedChats.map((chat) =>
        chat.toLowerCase()
      );
      console.log('üîÑ –û–±–Ω–æ–≤–ª–µ–Ω—ã –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã:', currentExcludedChats);
      sendResponse({ success: true });
    }
  });

  /** –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ */
  function createOrUpdateStatusIndicator(statusText) {
    let statusElement = document.querySelector('#gpt-bulk-status-indicator');
    if (!statusElement) {
      statusElement = document.createElement('div');
      statusElement.id = 'gpt-bulk-status-indicator';
      statusElement.style.marginTop = '6px';
      statusElement.style.fontStyle = 'italic';
      statusElement.style.color = '#169800';
      statusElement.style.fontWeight = 'bold';
      document.body.prepend(statusElement);
    }
    statusElement.textContent = statusText;
    return statusElement;
  }

  /** –ò–Ω—ä–µ–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ fetch */
  function injectFetchInterceptor() {
    const scriptElement = document.createElement('script');
    scriptElement.src = chrome.runtime.getURL('injected.js');
    scriptElement.onload = function () {
      this.remove();
    };
    (document.head || document.documentElement).appendChild(scriptElement);

    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∏–Ω—ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    window.addEventListener('message', function (event) {
      if (event.source !== window) return;

      if (event.data.type && event.data.type === 'GPT_TOKEN_CAPTURED') {
        capturedAccessToken = event.data.token;
        console.log('üóùÔ∏è –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω:', capturedAccessToken);
      }
    });
  }

  /** –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
  function waitForNavigationSidebar() {
    const checkInterval = setInterval(() => {
      console.log('üîç –ü–æ–∏—Å–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–∞–Ω–µ–ª–∏...');
      const navigationBlock = document.querySelector(
        'nav.group\\/scrollport, nav.group\\/scrollport.relative'
      );

      if (navigationBlock) {
        console.log('‚úÖ –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞:', navigationBlock);
      } else {
        console.warn('‚ùå –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (navigationBlock && !isUIAdded) {
        isUIAdded = true;
        addUserInterface(navigationBlock);
        clearInterval(checkInterval);
      }
    }, 1000);
  }

  /** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ */
  function addUserInterface(containerElement) {
    const wrapperElement = document.createElement('div');
    wrapperElement.style.padding = '10px';
    wrapperElement.style.margin = '10px 0 10px 0';
    wrapperElement.style.background = '#f2f2f2';
    wrapperElement.style.border = '1px solid #ccc';
    wrapperElement.style.borderRadius = '5px';
    wrapperElement.style.fontSize = '14px';
    wrapperElement.style.display = 'flex';
    wrapperElement.style.gap = '6px';

    const scrollButton = document.createElement('button');
    scrollButton.textContent = 'üìú –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –≤—Å—ñ —á–∞—Ç–∏';
    scrollButton.onclick = scrollToBottomAndLoadChats;

    const selectButton = document.createElement('button');
    selectButton.textContent = '‚úÖ –í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ';
    selectButton.onclick = () => {
      document.querySelectorAll('.gpt-chat-checkbox').forEach((checkbox) => {
        const chatLink = checkbox.closest('a[draggable="true"]');
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º —á–∞—Ç–∞
        const titleElement = chatLink.querySelector('.truncate');
        const chatTitle = titleElement?.textContent.trim().toLowerCase() || '';

        checkbox.checked = !currentExcludedChats.includes(chatTitle);
      });
    };

    const deleteButton = document.createElement('button');
    deleteButton.textContent = 'üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ';
    deleteButton.onclick = deleteSelectedChats;

    wrapperElement.appendChild(scrollButton);
    wrapperElement.appendChild(selectButton);
    wrapperElement.appendChild(deleteButton);

    containerElement.prepend(wrapperElement);

    // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥ –º–µ–Ω—é
    const statusElement = document.createElement('div');
    statusElement.id = 'gpt-bulk-status-indicator';
    statusElement.style.marginTop = '6px';
    statusElement.style.fontStyle = 'italic';
    statusElement.style.color = '#169800';
    statusElement.style.fontWeight = 'bold';
    containerElement.prepend(statusElement);
  }

  /** –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –∫–æ–Ω—Ü–∞ —Å–ø–∏—Å–∫–∞ —á–∞—Ç–æ–≤ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö */
  async function scrollToBottomAndLoadChats() {
    const scrollableElement = document.querySelector(
      'nav.group\\/scrollport, nav.group\\/scrollport.relative'
    );
    if (!scrollableElement) return;

    const statusElement = createOrUpdateStatusIndicator('‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    let previousHeight = 0;
    let unchangedHeightCount = 0;

    for (
      let iteration = 0;
      iteration < 50 && unchangedHeightCount < 5;
      iteration++
    ) {
      scrollableElement.scrollTo({
        top: scrollableElement.scrollHeight,
        behavior: 'smooth',
      });
      await waitForTime(500);

      const currentHeight = scrollableElement.scrollHeight;
      if (currentHeight === previousHeight) {
        unchangedHeightCount++;
      } else {
        unchangedHeightCount = 0;
      }

      previousHeight = currentHeight;
    }

    addCheckboxesToChats();
    statusElement.textContent = '‚úÖ –£—Å—ñ —á–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!';
  }

  /** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ–∫–±–æ–∫—Å–æ–≤ –∫ —á–∞—Ç–∞–º */
  function addCheckboxesToChats() {
    const chatLinkElements = document.querySelectorAll(
      'aside[aria-labelledby] a[draggable="true"]'
    );

    chatLinkElements.forEach((chatLink) => {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω
      if (chatLink.querySelector('.gpt-chat-checkbox')) return;

      // –°–æ–∑–¥–∞—ë–º —á–µ–∫–±–æ–∫—Å
      const checkboxElement = document.createElement('input');
      checkboxElement.type = 'checkbox';
      checkboxElement.className = 'gpt-chat-checkbox';
      checkboxElement.style.marginRight = '5px';

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É –Ω–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª —Å—Å—ã–ª–∫—É
      checkboxElement.addEventListener('click', (event) => {
        event.stopPropagation();
      });

      // –í—Å—Ç–∞–≤–ª—è–µ–º —á–µ–∫–±–æ–∫—Å –ø–µ—Ä–µ–¥ —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å—Å—ã–ª–∫–∏
      chatLink.prepend(checkboxElement);
    });
  }

  /** –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤ */
  async function deleteSelectedChats() {
    const selectedCheckboxes = document.querySelectorAll(
      '.gpt-chat-checkbox:checked'
    );
    if (!selectedCheckboxes.length) {
      return alert('‚ùó –û–±–µ—Ä—ñ—Ç—å —á–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
    }

    if (!confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${selectedCheckboxes.length} —á–∞—Ç(–∏)?`)) {
      return;
    }

    createOrUpdateStatusIndicator('‚è≥ –í–∏–¥–∞–ª–µ–Ω–Ω—è...');
    let deletedCount = 0;

    for (const checkbox of selectedCheckboxes) {
      // –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –∏ –∏–∑–≤–ª–µ–∫–∞–µ–º ID —á–∞—Ç–∞
      const chatLink = checkbox.closest('a[draggable="true"]');
      if (!chatLink) {
        console.warn('‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Å—Å—ã–ª–∫–∞ –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞', checkbox);
        continue;
      }

      const hrefAttribute = chatLink.getAttribute('href') || '';
      const idMatch = hrefAttribute.match(/\/c\/([a-f0-9\-]+)/);
      if (!idMatch) {
        console.warn('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –∏–∑', hrefAttribute);
        continue;
      }

      const chatId = idMatch[1];

      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞—Ö–≤–∞—á–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
      const accessToken = capturedAccessToken;
      if (!accessToken) {
        console.error('‚ùå –¢–æ–∫–µ–Ω –µ—â—ë –Ω–µ –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω');
        alert(
          '–¢–æ–∫–µ–Ω –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —É—Å–ø–µ–ª–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å —Ç–æ–∫–µ–Ω.'
        );
        return;
      }

      console.log('üóë –£–¥–∞–ª—è–µ–º —á–∞—Ç (PATCH):', chatId);

      try {
        const response = await fetch(`/backend-api/conversation/${chatId}`, {
          method: 'PATCH',
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${accessToken}`,
          },
          body: JSON.stringify({ is_visible: false }),
        });

        if (response.ok) {
          console.log(`‚úÖ –ß–∞—Ç —É–¥–∞–ª—ë–Ω: ${chatId}`);
          deletedCount++;
        } else {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ ${response.status}`, await response.text());
        }
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è', chatId, error);
      }
    }

    createOrUpdateStatusIndicator(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${deletedCount} —á–∞—Ç(–∏)!`);
    alert('‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
  console.log('üöÄ Chrome —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ ChatGPT Bulk Chat Remover –∑–∞–ø—É—â–µ–Ω–æ');

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–Ω—ã–µ —á–∞—Ç—ã –∏–∑ storage
  loadExcludedChatsFromStorage();

  injectFetchInterceptor();
  waitForNavigationSidebar();
})();
