// ==UserScript==
// @name         ChatGPT Bulk Chat Remover (2025 DOM, FULLY WORKING)
// @namespace    https://chat.openai.com
// @version      2.0
// @description  –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤: –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞, –≤—ã–±–æ—Ä, —á–µ–∫–±–æ–∫—Å—ã, —É–¥–∞–ª–µ–Ω–∏–µ, –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä, –ª–æ–≥–∏. –ü–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–±–æ—á–∏–π DOM –º–∞–π 2025!
// @author       GPT, user fixes
// @match        https://chatgpt.com/*
// @grant        none
// ==/UserScript==

(function () {
  'use strict';

  // —Å—é–¥–∞ –∑–∞–ø–∏—à–µ–º —Ç–æ–∫–µ–Ω, –∫–æ–≥–¥–∞ –æ–Ω –≤–ø–µ—Ä–≤—ã–µ –≤—Å—Ç—Ä–µ—Ç–∏—Ç—Å—è –≤ headers
  window.__GPT_ACCESS_TOKEN = null;

  // –∑–∞–ø–æ–º–Ω–∏–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π fetch
  const ___origFetch = window.fetch;

  // –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º
  window.fetch = async function (resource, config) {
    // –µ—Å–ª–∏ –≤ –∫–æ–Ω—Ñ–∏–≥–µ –µ—Å—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ Authorization ‚Äî –¥–æ—Å—Ç–∞–Ω–µ–º –æ—Ç—Ç—É–¥–∞ —Ç–æ–∫–µ–Ω
    if (config && config.headers && config.headers.Authorization) {
      const m = config.headers.Authorization.match(/Bearer\s+(.+)/i);
      if (m) {
        window.__GPT_ACCESS_TOKEN = m[1];
        console.log('üóùÔ∏è –ó–∞—Ö–≤–∞—á–µ–Ω GPT access token:', window.__GPT_ACCESS_TOKEN);
      }
    }
    // –¥–∞–ª–µ–µ –æ—Ç–¥–∞–¥–∏–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à—Ç–∞—Ç–Ω–æ–º—É fetch
    return ___origFetch.call(this, resource, config);
  };

  let UI_ADDED = false;

  /** Utility */
  function wait(ms) {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /** –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ */
  function createOrUpdateStatus(text) {
    let status = document.querySelector('#gpt-bulk-status');
    if (!status) {
      status = document.createElement('div');
      status.id = 'gpt-bulk-status';
      status.style.marginTop = '6px';
      status.style.fontStyle = 'italic';
      status.style.color = '#169800';
      status.style.fontWeight = 'bold';
      document.body.prepend(status);
    }
    status.textContent = text;
    return status;
  }

  /** –û—Å–Ω–æ–≤–Ω–æ–π –±–ª–æ–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */
  function waitForSidebar() {
    const interval = setInterval(() => {
      console.log('üîç –ü–æ–∏—Å–∫ <nav.group/scrollport>...');
      const navBlock = document.querySelector(
        'nav.group\\/scrollport, nav.group\\/scrollport.relative'
      );
      if (navBlock) {
        console.log('‚úÖ –ù–∞–π–¥–µ–Ω nav-–±–ª–æ–∫:', navBlock);
      } else {
        console.warn('‚ùå nav-–±–ª–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      if (navBlock && !UI_ADDED) {
        UI_ADDED = true;
        addUI(navBlock);
        clearInterval(interval);
      }
    }, 1000);
  }

  /** UI-–º–µ–Ω—é */
  function addUI(container) {
    const wrapper = document.createElement('div');
    wrapper.style.padding = '10px';
    wrapper.style.margin = '10px 0 10px 0';
    wrapper.style.background = '#f2f2f2';
    wrapper.style.border = '1px solid #ccc';
    wrapper.style.borderRadius = '5px';
    wrapper.style.fontSize = '14px';
    wrapper.style.display = 'flex';
    wrapper.style.gap = '6px';

    const scrollBtn = document.createElement('button');
    scrollBtn.textContent = 'üìú –ü—Ä–æ–∫—Ä—É—Ç–∏—Ç–∏ –≤—Å—ñ —á–∞—Ç–∏';
    scrollBtn.onclick = scrollToBottom;

    const selectBtn = document.createElement('button');
    selectBtn.textContent = '‚úÖ –í–∏–¥—ñ–ª–∏—Ç–∏ –≤—Å—ñ';
    selectBtn.onclick = () => {
      document
        .querySelectorAll('.gpt-chat-checkbox')
        .forEach((cb) => (cb.checked = true));
    };

    const deleteBtn = document.createElement('button');
    deleteBtn.textContent = 'üóë –í–∏–¥–∞–ª–∏—Ç–∏ –æ–±—Ä–∞–Ω—ñ';
    deleteBtn.onclick = deleteSelectedChats;

    wrapper.appendChild(scrollBtn);
    wrapper.appendChild(selectBtn);
    wrapper.appendChild(deleteBtn);

    container.prepend(wrapper);

    // –°—Ç–∞—Ç—É—Å –ø–æ–¥ –º–µ–Ω—é
    const status = document.createElement('div');
    status.id = 'gpt-bulk-status';
    status.style.marginTop = '6px';
    status.style.fontStyle = 'italic';
    status.style.color = '#169800';
    status.style.fontWeight = 'bold';
    container.prepend(status);
  }

  /** –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ */
  async function scrollToBottom() {
    const scrollable = document.querySelector(
      'nav.group\\/scrollport, nav.group\\/scrollport.relative'
    );
    if (!scrollable) return;

    const status = createOrUpdateStatus('‚è≥ –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
    let prevHeight = 0;
    let sameCount = 0;

    for (let i = 0; i < 50 && sameCount < 5; i++) {
      scrollable.scrollTo({ top: scrollable.scrollHeight, behavior: 'smooth' });
      await wait(500);

      const newHeight = scrollable.scrollHeight;
      if (newHeight === prevHeight) sameCount++;
      else sameCount = 0;

      prevHeight = newHeight;
    }

    addCheckboxes();
    status.textContent = '‚úÖ –£—Å—ñ —á–∞—Ç–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ!';
  }

  /** –ß–µ–∫–±–æ–∫—Å—ã */
  function addCheckboxes() {
    const chatLinks = document.querySelectorAll(
      'aside[aria-labelledby] a[draggable="true"]'
    );
    chatLinks.forEach((link) => {
      // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ —á–µ–∫–±–æ–∫—Å —É–∂–µ –µ—Å—Ç—å
      if (link.querySelector('.gpt-chat-checkbox')) return;

      // —Å–æ–∑–¥–∞—ë–º —á–µ–∫–±–æ–∫—Å
      const checkbox = document.createElement('input');
      checkbox.type = 'checkbox';
      checkbox.className = 'gpt-chat-checkbox';
      checkbox.style.marginRight = '5px';

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–ø–ª—ã—Ç–∏–µ, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É –Ω–µ –∫–ª–∏–∫–∞–ª —Å–∞–º <a>
      checkbox.addEventListener('click', (e) => {
        e.stopPropagation();
        // –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ‚Äî –¥–µ—Ñ–æ–ª—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ) –æ—Å—Ç–∞—ë—Ç—Å—è
      });

      // –≤—Å—Ç–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–¥ —Å—Å—ã–ª–∫–æ–π
      link.prepend(checkbox);
    });
  }

  /** –û–∂–∏–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ Delete */
  async function waitForDeleteButton(timeout = 4000) {
    return new Promise((resolve, reject) => {
      const interval = setInterval(() => {
        const btn = Array.from(document.querySelectorAll('button')).find(
          (b) =>
            b.textContent.trim().toLowerCase() === 'delete' &&
            !b.className.match(/bg-red/i) // –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        );
        if (btn) {
          clearInterval(interval);
          resolve(btn);
        }
      }, 100);

      setTimeout(() => {
        clearInterval(interval);
        reject(new Error('–ö–Ω–æ–ø–∫–∞ Delete –Ω–µ –ø–æ—è–≤–∏–ª–∞—Å—å'));
      }, timeout);
    });
  }

  /** –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–æ–≤ */
  async function deleteSelectedChats() {
    const selected = document.querySelectorAll('.gpt-chat-checkbox:checked');
    if (!selected.length) return alert('‚ùó –û–±–µ—Ä—ñ—Ç—å —á–∞—Ç–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è');
    if (!confirm(`–í–∏–¥–∞–ª–∏—Ç–∏ ${selected.length} —á–∞—Ç(–∏)?`)) return;

    createOrUpdateStatus('‚è≥ –í–∏–¥–∞–ª–µ–Ω–Ω—è...');
    let countDeleted = 0;

    for (const cb of selected) {
      // 1. –ù–∞—Ö–æ–¥–∏–º —Å—Å—ã–ª–∫—É –∏ –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º ID
      const link = cb.closest('a[draggable="true"]');
      if (!link) {
        console.warn('‚ùå –ù–µ –Ω–∞—à–ª–∏ <a> –¥–ª—è —á–µ–∫–±–æ–∫—Å–∞', cb);
        continue;
      }
      const href = link.getAttribute('href') || '';
      const m = href.match(/\/c\/([a-f0-9\-]+)/);
      if (!m) {
        console.warn('‚ùå –ù–µ —Å–º–æ–≥–ª–∏ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å ID –∏–∑', href);
        continue;
      }
      const id = m[1];

      // –±–µ—Ä—ë–º —Ç–æ–∫–µ–Ω, –∫–æ—Ç–æ—Ä—ã–π –º—ã —É–∂–µ ¬´–ø–æ–π–º–∞–ª–∏¬ª
      const token = window.__GPT_ACCESS_TOKEN;
      if (!token) {
        console.error(
          '‚ùå –¢–æ–∫–µ–Ω –µ—â—ë –Ω–µ –∑–∞—Ö–≤–∞—á–µ–Ω ‚Äî —Å–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ UI –ª—é–±–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –≤—ã–∑—ã–≤–∞—é—â–µ–µ fetch —Å Authorization.'
        );
        alert(
          '–¢–æ–∫–µ–Ω –µ—â—ë –Ω–µ –ø–æ–ª—É—á–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±–æ–µ –º–µ–Ω—é —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é, —á—Ç–æ–±—ã —Å–∫—Ä–∏–ø—Ç —É—Å–ø–µ–ª –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç—å fetch.'
        );
        return;
      }

      console.log('üóë –£–¥–∞–ª—è–µ–º (PATCH) conversation:', id);

      try {
        const res = await fetch(`/backend-api/conversation/${id}`, {
          method: 'PATCH',
          credentials: 'same-origin',
          headers: {
            'Content-Type': 'application/json',
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify({ is_visible: false }),
        });
        if (res.ok) {
          console.log(`‚úÖ –£–¥–∞–ª—ë–Ω ${id}`);
          countDeleted++;
        } else {
          console.warn(`‚ö†Ô∏è –û—à–∏–±–∫–∞ ${res.status}`, await res.text());
        }
      } catch (err) {
        console.error('‚ùå Fetch failed for', id, err);
      }
    }

    createOrUpdateStatus(`‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ ${countDeleted} —á–∞—Ç(–∏)!`);
    alert('‚úÖ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  }

  console.log('üöÄ –°–∫—Ä–∏–ø—Ç Tampermonkey –∑–∞–ø—É—â–µ–Ω');
  waitForSidebar();
})();
